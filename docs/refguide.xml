<indexterm><primary>man page</primary><see>reference guide</see></indexterm>
<indexterm class="startofrange" id="man-ncrack1-indexterm">
  <primary>reference guide (man page)</primary>
</indexterm>
<refentry id='man-ncrack1'>
  <refmeta>
    <refentrytitle>ncrack</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="source">Ncrack</refmiscinfo>
    <refmiscinfo class="manual">Ncrack Reference Guide</refmiscinfo>
  </refmeta>
  <refnamediv id='man-name'>
    <refname>ncrack</refname>
    <refpurpose>Network authentication cracking tool</refpurpose>
  </refnamediv>
  <!-- body begins here -->
  <refsynopsisdiv id="man-synopsis">
    <cmdsynopsis sepchar=" ">
      <command moreinfo="none">ncrack</command>
      <arg choice="opt" rep="norepeat">
        <replaceable>Options</replaceable>
      </arg>
      <arg choice="req" rep="norepeat">
        <replaceable>target specification</replaceable>
      </arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1 id="man-description">
    <title>Description</title>
    <indexterm significance="normal"><primary>Ncrack</primary><secondary>
        description of</secondary>
    </indexterm>
    <web>
    <note>
    <para>
    This document describes the very latest version of
    Ncrack available from <ulink url="http://ncrack.org/download.html"/> Please
    ensure you are using the latest version before reporting that a
    feature doesn't work as described.
    </para>
    </note>
    </web>
    <para>
      Ncrack is an open source tool for network authentication cracking. 
      It was designed for high-speed parallel cracking using a dynamic engine
      that can adapt to different network situations. Ncrack can also be
      extensively fine-tuned for special cases, though the default parameters
      are generic enough to cover almost every situation. It is built on a
      modular architecture that allows for easy extension to support additional
      protocols. While Ncrack's main purpose is to audit the security of large
      networks for default, weak passwords in a rapid, yet reliable way, it can
      also be used to conduct some fairly sophisticated bruteforcing attacks.
    </para>

    <para>
      The output from Ncrack is a list of found credentials, if any, for each
      of the targets specified. Ncrack can also print an interactive status
      report of progress so far and possibly additional debugging information
      that can help track problems, if the user selected that option.
    </para>

    <para>
      A typical Ncrack scan is shown in
      <xref linkend="man-ex-repscan" xrefstyle="select: label nopage" />. 
      The only Ncrack arguments used in this example are the two target IP
      addresses along with the the corresponding ports for each of them. The
      two example ports 21 and 22 are automatically resolved to the default
      services listening on them: ftp and ssh.
    </para>

    <example id="man-ex-repscan"><title>A representative Ncrack scan</title>
      <indexterm><primary><option>-v</option></primary><secondary>example of
      </secondary></indexterm>
    <screen>

$ ncrack 10.0.0.130:21 192.168.1.2:22

Starting Ncrack 0.01ALPHA ( http://ncrack.org ) at 2009-07-24 23:05 EEST

Discovered credentials for ftp on 10.0.0.130 21/tcp:
10.0.0.130 21/tcp ftp: admin hello1
Discovered credentials for ssh on 192.168.1.2 22/tcp:
192.168.1.2 22/tcp ssh: guest 12345
192.168.1.2 22/tcp ssh: admin money$

Ncrack done: 2 services scanned in 156.03 seconds.

Ncrack finished.

    </screen>
    </example>

  </refsect1>

  <para>
    The latest version of Ncrack can be obtained from
    <ulink url="http://ncrack.org" />. The latest version of this man page is
    available at http://ncrack.org/man.html .
  </para>
  
  <refsect1 id='man-briefoptions'>
    <title>Options Summary</title>

    <para>
      This options summary is printed when Ncrack is run with no arguments.
      It helps people remember the most common options, but is no substitute
      for the in-depth documentation in the rest of this manual.
    </para>
     <indexterm class="startofrange" id="ncrack-usage-indexterm">
       <primary sortas="#">summary of options</primary>
     </indexterm>
     <indexterm class="startofrange" id="ncrack-usage-ncrack-indexterm">
       <primary>command-line options</primary>
       <secondary>of Ncrack</secondary>
     </indexterm>
      &ncrack-usage;
      <indexterm class="endofrange" startref="ncrack-usage-ncrack-indexterm"/>
      <indexterm class="endofrange" startref="ncrack-usage-indexterm"/>
  </refsect1>


  <refsect1 id="man-target-specification">
    <title>Target Specification</title>
    <indexterm significance="normal"><primary>target specification</primary>
    </indexterm>

     <para>
       Everything on the Ncrack command-line that isn't an option (or an
       option argument) is treated as a target host specification. The
       simplest case is to specify a target IP address or a hostname. Note,
       that you also need to specify a service to crack for the selected
       targets. Ncrack is very flexible in host/service specification.
       While hostnames and IP addresses can be defined with the flexibility
       that you are probably used to from Nmap, services along with
       service-specific options have a unique specification style that enables
       a combination of features to be taken advantage of. 
     </para>

     <para>
       Sometimes you wish to crack a whole network of adjacent hosts.
       For this, Ncrack supports CIDR-style <indexterm significance="normal">
       <primary>CIDR (Classless Inter-Domain Routing)</primary></indexterm>
       addressing. You can append /<replaceable>numbits</replaceable> to an
       IPv4 address or hostname and Ncrack will try to crack every IP
       address for which the first numbits are the same as for the
       reference IP or hostname given. For example, 192.168.10.0/24 would
       send probes to the 256 hosts between 192.168.10.0
       <literal moreinfo="none">11000000 10101000 00001010 00000000</literal>)
       and 192.168.10.255 (binary:
       <literal moreinfo="none">11000000 10101000 00001010 11111111</literal>),
       inclusive. 192.168.10.40/24 would crack exactly the same targets.
       Given that the host <literal moreinfo="none">scanme.nmap.org</literal>
       <indexterm significance="normal"><primary>
       <literal moreinfo="none">scanme.nmap.org</literal></primary></indexterm>
       is at the IP address 64.13.134.52, the specification
       scanme.nmap.org/16 would send probes to the 65,536 IP addresses
       between 64.13.0.0 and 64.13.255.255. The smallest allowed value is
       /0, which targets the whole Internet. The largest value is /32,
       which targets just the named host or IP address because all address
       bits are fixed.
      </para>
 
      <indexterm significance="normal"><primary>address ranges</primary>
      </indexterm>
      <para>
        CIDR notation is short but not always flexible enough.  For example,
        you might want to send probes to 192.168.0.0/16 but skip any IPs
        ending with .0 or .255 because they may be used as subnet network
        and broadcast addresses. Ncrack supports this through octet range
        addressing. Rather than specify a normal IP address, you can specify
        a comma-separated list of numbers or ranges for each octet. For
        example, 192.168.0-255.1-254 will skip all addresses in the range
        that end in .0 or .255, and 192.168.3-5,7.1 will target the four
        addresses 192.168.3.1, 192.168.4.1, 192.168.5.1, and 192.168.7.1.
        Either side of a range may be omitted; the default values are 0 on
        the left and 255 on the right. Using
        <literal moreinfo="none">-</literal> by itself is the same as 0-255,
        but remember to use 0- in the first octet so the target
        specification doesn't look like a command-line option. Ranges need
        not be limited to the final octets: the specifier will send probes
        to all IP addresses on the Internet ending in 13.37 This sort of
        broad sampling can be useful for Internet surveys and research.
      </para>
 
      <para>
        Ncrack accepts multiple host specifications on the command line,
        and they don't need to be the same type. The command
        <command moreinfo="none">ncrack scanme.nmap.org
        192.168.0.0/8 10.0.0,1,3-7.- -p22</command> does what you would expect.
      </para>
 
      <para>
        While targets are usually specified on the command lines, the
        following options are also available to control target selection:
      </para>

      <variablelist>

      <varlistentry>
        <term>
          <option>-iL <replaceable>inputfilename</replaceable></option>
          (Input from list)
          <indexterm><primary><option>-iL</option></primary></indexterm>
          <indexterm><primary>target specification</primary><secondary>
              from list</secondary></indexterm>
        </term>
        <listitem>
          <para>Reads target specifications from
          <replaceable>inputfilename</replaceable>. Passing a huge
          list of hosts is often awkward on the command line, yet it
          is a common desire. For example, you might want to crack
          a list of very specific servers that have been specified for
          penetration testing. Simply generate the list
          of hosts to crack and pass that filename to Ncrack as an
          argument to the <option>-iL</option> option. Entries can be
          in any of the formats accepted by Ncrack on the command line
          (IP address, hostname, CIDR, octet ranges or Ncrack's special
          host-service syntax. Each
          entry must be separated by one or more spaces, tabs, or
          newlines.  You can specify a hyphen (<literal>-</literal>)
          as the filename if you want Ncrack to read hosts from standard
          input rather than an actual file. Note, however, that if hosts
          are specified without any service, you will have to also provide
          services/ports for the targets using the <option>-p</option>
          option.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--exclude
            <replaceable>host1</replaceable><optional>,
              <replaceable>host2</replaceable><optional>,
                ...</optional></optional></option> (Exclude hosts/networks)
          <indexterm significance="preferred"><primary><option>--exclude
          </option></primary></indexterm>
          <indexterm><primary>excluding targets</primary></indexterm>
        </term>
        <listitem>
          <para>Specifies a comma-separated list of targets to be
          excluded from the scan even if they are part of the overall
          network range you specify.  The list you pass in uses normal
          Ncrack syntax, so it can include hostnames, CIDR netblocks,
          octet ranges, etc.  This can be useful when the network you
          wish to scan includes untouchable mission-critical servers,
          systems that are known to react adversely to heavy load,
          or subnets administered by other people.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--excludefile <replaceable>exclude_file</replaceable>
          </option> (Exclude list from file)
          <indexterm significance="preferred"><primary><option>
                --excludefile</option></primary></indexterm>
        </term>
        <listitem>
          <para>This offers the same functionality as the
            <option>--exclude</option>
          option, except that the excluded targets are provided in a
          newline, space, or tab delimited
          <replaceable>exclude_file</replaceable> rather than on the
          command line.</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </refsect1>


  <refsect1 id="man-service-specification">
  <title>Service Specification</title>
  <indexterm significance="normal"><primary>service specification</primary>
  </indexterm>

   <para>
     No cracking session can be carried out without targetting a certain
     service to attack. Service specification is one of the most flexible
     subsystems of Ncrack and collaborates with target-specification in a
     way that allows different option combinations to be applied. For
     Ncrack to start running, you will have to specify at least one target
     host and one associated service to attack. Ncrack provides ways to
     specify a service by its default port number, by its name (as
     extracted from the <filename>ncrack-services</filename> file) or both.
     Normally, you need to define both name and port number only in
     the special case where you know that a particular service is listening on
     a non-default port.
   </para>

   <para>
     Ncrack offers two distinct ways with which services will be applied to
     your targets: per-host service specification and global specification. 
   </para>

   <variablelist><title>Per-host service specification</title>

     <varlistentry>
       <listitem>
      <para>
       Services specified in this mode are written next to the host and
       apply to it only. Keep in mind, however, that target-specification
       allows wildcards/netmasks, which essentially means that
       applying a per-host service specification format to that particular
       target will affect all of the expanded ones as a result.
       The general format is:
      </para>
         <para><option>
             service-name://target:port-number</option>
         </para>
      <para>
       where <option>target</option> is a hostname or IP
         address in any of the formats described in the
         target-specification section, <option>service-name</option> is
         one of the common service names as defined in the
         <emphasis><filename>ncrack-services</filename></emphasis>
         file (e.g ssh, http) and <option>port number</option>
         is what it obviously means.

       Ncrack can determine the default port numbers for each of the
       services it supports, as well as being able to deduce the service
       name when a default port number has been specified. Specifying both
       has meaning only when the user has a priori knowledge of a service
       listening on a non-default port number. This can easily be
       determined by using version detection like the one offered by Nmap's 
       -sV option. 
      </para>

      <example id="man-rep-exscan"><title>Per-host service specification
          example</title>
        <screen>

$ ncrack scanme.nmap.org:22 ftp://10.0.0.10 ssh://192.168.1.*:5910

       </screen>
     </example>
     <para>
       The above command will try to crack hosts: scanme.nmap.org on SSH
       service (default port 22), 10.0.0.10 on FTP service (default port
       21) and 192.168.1.0 - 192.168.1.255 (all of this C subnet) on SSH
       service on non-default port 5910 which has been explicitly
       specified. In the last case, Ncrack wouldn't be able to determine
       that the subnet hosts are to be scanned against the SSH
       service on that particular port without the user explicitly asking
       for it, because there isn't any mapping of port-number 5910 to
       service SSH. 
      </para>
 
 
     </listitem>
     </varlistentry>

   </variablelist>


     <variablelist><title>Global service specification</title>

     <varlistentry>
       <listitem>
      <para>
        Services specified in this mode are applied to
        <emphasis>all</emphasis> hosts that haven't been associated with
        the per-host service specification format. This is done using
        the <option>-p</option> option. While this facility may be similar
        to that of Nmap's, you should try not to confuse it, since the
        functionality is of a slightly different nature. Services can be
        specified using comma separated directives of the general format:

      </para>
         <para><option>
             -p service1:port-number1,service2:port-number2,...
           </option>
         </para>
      <para>
        As usual, you need not specify both service name and port number
        since Ncrack knows the mappings of default-services to default-port
        numbers. Be careful though not to include any space between each
        service-name and/or port number, because Ncrack will think that
        the argument after the space is a host as per the rule
        "everything that isn't an option is a target specification". 
      </para>

       <example id="man-rep-exscan"><title>Global service specification
          example</title>
        <screen>

$ ncrack scanme.nmap.org 10.0.0.120-122 192.168.2.0/24 -p 22,ftp:3210,telnet

       </screen>
     </example>
     <para>
       The above command will try to crack all of the specified hosts
       scanme.nmap.org, 10.0.0.120, 10.0.0.121, 10.0.0.122 and the C class
       subnet of 192.168.2.0 against the following services: SSH service
       (mapped from default port 22), FTP service on non-default port 3210, and
       TELNET service on default port 23.
     </para>
     </listitem>
     </varlistentry>

   </variablelist>

   <para>
     Of course, Ncrack allows you to combine both modes of service
     specification if you deem that as necessary. Normally, you will only
     need to specify a couple of services but cracking a lot of hosts
     against many different services might be a longterm project for
     large networks that need to be consistently audited for weak
     passwords. If you are in doubt, about which hosts and services are
     going to be cracked with the current command, you can use the
     <option>-sL</option> option (see below for explanation).
   </para>

  </refsect1>

  <refsect1 id="man-service-options">
  <title>Service Options</title>
  <indexterm significance="normal"><primary>service options</primary>
  </indexterm>

  <para>
    Apart from general service specification, Ncrack allows you to provide
    a multitude of options that apply to each or a subset of your targets.
    Options include timing and performance optimizations
    (which are thoroughly analyzed in a seperate section), SSL
    enabling/disabling and other module-specific parameters like the
    relative URL path for the HTTP module. Options can be defined in a
    variety of ways which include: per-host options, per-module options
    and global options. Since a combination of these options may be used,
    there is a strict hierarchy of precedence which will be discussed
    later.
  </para>

   <variablelist><title>Per-host Options</title>

     <varlistentry>
       <listitem>
         <para>
         Options in this mode apply only to the host(s) they are referring
         to and are written next to it according to the following format:

      </para>
      <para><option>
          service-name://target:port-number,opt1=optval1,opt2=optval2,...
          </option>
        </para>

        <para>
          The format concerning the service specification which comes before
          the options, has been explained in the previous section.
          <option>optN</option> is referring to any of the option names
          that are available (a list will follow below), while
          <option>optvalN</option> determines the value of that option and
          depends on the nature of it. For example, most timing-related
          options expect to receive numbers as values, while the
          <option>path</option> option obviously needs a string argument.
        </para>
      </listitem>
    </varlistentry>

  </variablelist>

  <variablelist><title>Per-module Options</title>

     <varlistentry>
       <listitem>
         <para>
         Options in this mode apply to all hosts that are associated with
         the particular service/module. This is accomplished using the
         <option>-m</option> which is defined with the format:

      </para>
      <para><option>
          -m service-name:opt1=optval1,opt2=optval2,...
          </option>
        </para>

        <para>
          This option can be invoked multiple times, for as many
          different services as you might need to define service-wide
          applicable options. Each iteration of this option must refer to
          only one service. However, to avoid confusion, this option had better
          not be called more than one time for the same service, although
          this is allowed and the last iteration will take precedence over
          the previous ones for all redefined option values.
       </para>
      </listitem>
    </varlistentry>

   </variablelist>




  </refsect1>


  <refsect1 id="man-specification">
    <title>Timing and Performance</title>
    <indexterm class="startofrange" id="man-performance-timing-indexterm">
      <primary>timing</primary></indexterm>
    <indexterm class="startofrange" id="man-performance-indexterm">
      <primary>performance</primary></indexterm>

    <para>
      The timing engine is perhaps the most important part of any serious
      network authentication cracking tool. Ncrack's timing engine offers
      a great many options for optimization and can be bended to serve
      virtually any user need. As Ncrack is progressing, this subsystem
      is going to to evolve into a dynamic autonomous engine
      that will be able to automatically adjust its behaviour
      according to the network feedback it gets, in order to achieve
      maximum performance without any user intervention.
    </para>



  </refsect1>


  

  
  <refsect1 id='man-output'>
    <title>Output</title>
    <indexterm class="startofrange" id="man-output-indexterm">
      <primary>output formats</primary></indexterm>

    <para>
     Any security tool is only as useful as the output it
     generates. Complex tests and algorithms are of little value if
     they aren't presented in an organized and comprehensible fashion.
     Of course, no single format can please everyone. So Ncrack offers
     several formats, including the interactive mode for humans to read
     directly and XML for easy parsing by software.
    </para>

    <para>
     In addition to offering different output formats, Ncrack provides
     options for controlling the verbosity of output as well as debugging
     messages. Output types may be sent to standard output or to named
     files, which Ncrack can append to or clobber.  
    </para>
     
    <para>
     Ncrack makes output available in three different formats.
     The default is called <firstterm>interactive output</firstterm>,
     and it is sent to standard output (stdout). There is also 
     <firstterm>normal output</firstterm>, which is similar to interactive
     except that it displays less runtime information and warnings since
     it is expected to be analyzed after the scan completes rather than
     interactively.
    </para>

    <para><firstterm>XML output</firstterm> is one of the most important
     output types, as it can be converted to HTML, easily parsed by
     programs such as Ncrack graphical user interfaces, or imported
     into databases. Currently, XML output hasn't been implemented.
    </para>

    <para>
     While interactive output is the default and has no associated
     command-line options, the other two format options use the same
     syntax. They take one argument, which is the filename that results
     should be stored in. Multiple formats may be specified, but each
     format may only be specified once. For example, you may wish to save
     normal output for your own review while saving XML of the same scan
     for programmatic analysis. You might do this with the options
     <option>-oX myscan.xml -oN myscan.ncrack</option>. While this chapter
     uses the simple names like <literal>myscan.xml</literal> for brevity,
     more descriptive names are generally recommended. The names chosen
     are a matter of personal preference. A scheme could be using long
     filenames that incorporate the scan date and a word or two
     describing the scan, placed in a directory named after the
     company that is being scanned.
    </para>

    <para>
     While these options save results to files, Ncrack still prints
     interactive output to stdout as usual. For example, the command
     <command>nmap -oX myscan.xml [target]</command> prints XML to
     <filename>myscan.xml</filename> and fills standard output with
     the same interactive results it would have printed if
     <option>-oX</option> wasn't specified at all. You can change this
     by passing a hyphen character as the argument to one of the format
     types. This causes Ncrack to deactivate interactive output, and
     instead print results in the format you specified to the standard
     output stream. So the command <command>nmap -oX - target</command>
     will send only XML output to stdout. Serious errors may still be
     printed to the normal error stream, stderr.
    </para>

    <para>
     Unlike some Ncrack arguments, the space between the logfile option
     flag (such as <option>-oX</option>) and the filename or hyphen is
     mandatory.
    </para>

    <para>
     All of these arguments support
     <function>strftime</function>-like conversions in the filename.
     <literal>%H</literal>, <literal>%M</literal>, <literal>%S</literal>,
     <literal>%m</literal>, <literal>%d</literal>, <literal>%y</literal>,
     and <literal>%Y</literal> are all exactly the same as in
     <function>strftime</function>.  <literal>%T</literal> is the same
     as <literal>%H%M%S</literal>, <literal>%R</literal> is the same as
     <literal>%H%M</literal>, and <literal>%D</literal> is the same as
     <literal>%m%d%y</literal>. A <literal>%</literal> followed by any other
     character just yields that character (<literal>%%</literal> gives you a
     percent symbol).  So <option>-oX 'scan-%T-%D.xml'</option> will use an XML
     file in the form of <filename>scan-144840-121307.xml</filename>.
    </para>

   <para>
    Ncrack also offers options to control scan verbosity and to append
    to output files rather than clobbering them.  All of these options are
    described below.
   </para>

  <variablelist><title>Ncrack Output Formats</title>
      <varlistentry>
        <term>
          <option>-oN <replaceable>filespec</replaceable></option>
          (normal output)
          <indexterm><primary><option>-oN</option></primary></indexterm>
          <indexterm><primary>normal output</primary></indexterm></term>
        <listitem>

        <para>
          Requests that <literal>normal output</literal> be
          directed to the given filename. As discussed above, this
          differs slightly from <literal>interactive output</literal>.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
        <option>-oX <replaceable>filespec</replaceable></option> (XML output)
          <indexterm><primary><option>-oX</option></primary></indexterm>
          <indexterm><primary>XML output</primary></indexterm></term>
        <listitem>

        <para>
          Requests that <literal>XML output</literal> be
          directed to the given filename. Currently this is not
          implemented.
        </para>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-oA <replaceable>basename</replaceable></option>
          (Output to all formats)
          <indexterm significance="preferred"><primary><option>-oA
          </option></primary></indexterm></term>
          <listitem>
          <para>

           As a convenience, you may specify <option>-oA
           <replaceable>basename</replaceable></option> to store scan
           results in normal and XML formats at once. They
           are stored in
           <filename><replaceable>basename</replaceable>.ncrack</filename>, and
           <filename><replaceable>basename</replaceable>.xml</filename>
           respectively. As with most programs, you can prefix the filenames
           with a directory path, such as
           <filename>~/ncracklogs/foocorp/</filename> on Unix or
           <filename>c:\hacking\sco</filename> on Windows.
         </para>
        </listitem>
      </varlistentry>

   </variablelist>

   <variablelist><title>Verbosity and debugging options</title>
      <varlistentry>
        <term>
          <option>-v</option> (Increase verbosity level)
          <indexterm><primary><option>-v</option></primary></indexterm>
          <indexterm><primary>verbosity</primary></indexterm>
        </term>
        <listitem>

        <para>
        Increases the verbosity level, causing Ncrack to
        print more information about the scan in progress. Credentials
        are shown as they are found and more statistical information is
        printed in the end. Use it twice or more for even greater
        verbosity.
        <indexterm><primary><option>-v</option></primary>
          <secondary>giving more than once</secondary></indexterm>
        </para>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-d [level]</option> (Increase or set debugging level)
        <indexterm><primary><option>-d</option></primary></indexterm>
        <indexterm><primary>debugging</primary></indexterm>
        </term>
        <listitem>

        <para>
        When even verbose mode doesn't provide sufficient data for you,
        debugging is available to flood you with much more! As with the
        verbosity option (<option>-v</option>), debugging is enabled with a
        command-line flag (<option>-d</option>) and the debug level can be
        increased by specifying it multiple times. Alternatively, you can set
        a debug level by giving an argument to <option>-d</option>. For
        example, <option>-d10</option> sets level ten. That is the highest
        effective level and will produce thousands of lines, unless your
        cracking session is going really slow.
        </para>

        <para>
        Debugging output is useful when a bug is suspected in Ncrack,
        or if you are simply confused as to what Ncrack is doing and why.
        As this feature is mostly intended for developers, debug lines aren't
        always self-explanatory. 
        If you don't understand a line, your only recourses are to ignore it,
        look it up in the source code, or request help from
        the development list (<citetitle>nmap-dev</citetitle>). Some lines are
        self explanatory, but the messages become more obscure as the debug
        level is increased.
        </para>

        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--log-errors</option> 
          (Log errors/warnings to normal mode output file)
          <indexterm significance="preferred"><primary><option>--log-errors
          </option></primary></indexterm>
        </term>
        <listitem>

        <para>
        Warnings and errors printed by Ncrack usually go only to
        the screen (interactive output), leaving any normal-format
        output files (usually specified with <option>-oN</option>)
        uncluttered.  When you do want to see those messages in the
        normal output file you specified, add this option. It is
        useful when you aren't watching the interactive output or
        when you want to record errors while debugging a problem.
        The error and warning messages will still appear in
        interactive mode too.  This won't work for most errors
        related to bad command-line arguments because Ncrack may not
        have initialized its output files yet.
        </para>

        <para>
        An alternative to <option>--log-errors</option> is
        redirecting interactive output (including the standard error
        stream) to a file. Most Unix shells make this
        approach easy, though it can be difficult on Windows.
        </para>

        </listitem>
      </varlistentry>

   </variablelist>

   <variablelist><title>Miscellaneous output options</title>

     <varlistentry>
        <term>
          <option>--append-output</option> (Append to rather than clobber output files)
           <indexterm><primary><option>--append-output</option></primary></indexterm>
        </term>
        <listitem>

           <para>When you specify a filename to an output format flag
           such as <option>-oX</option> or <option>-oN</option>, that
           file is overwritten by default.  If you prefer to keep the
           existing content of the file and append the new results,
           specify the <option>--append-output</option> option. All
           output filenames specified in that Ncrack execution will then
           be appended to rather than clobbered. This doesn't work
           well for XML (<option>-oX</option>) scan data as the
           resultant file generally won't parse properly until you fix
           it up by hand.</para>
        </listitem>
    </varlistentry>

   </variablelist>

  </refsect1>


  <refsect1 id='man-misc-options'>
    <title>Miscellaneous Options</title>
    <para>This section describes some important (and not-so-important)
    options that don't really fit anywhere else.</para>

   <variablelist>

      <varlistentry>
        <term>
          <option>--datadir <replaceable>directoryname</replaceable></option>
          (Specify custom Ncrack data file location)
          <indexterm significance="preferred"><primary><option>--datadir
          </option></primary></indexterm>
        </term>
        <listitem>

          <para>Ncrack needs a file called <filename>ncrack-services</filename>
          to load a lookup-table of supported services/ports. This file
          shouldn't be changed, unless you know what you are doing (e.g
          extending Ncrack for additional modules). In addition, Ncrack is
          shipped with various username and password lists, some of which
          are used by default in case the user doesn't specify ones of his
          own. All these files are normally copied during the installation
          procedure to a directory such as /usr/share/ncrack or
          /usr/local/share/ncrack . Using the <option>--datadir</option>
          option, will force Ncrack to start searching for these files in
          specified directory. If the files aren't found, then it will continue
          searching in the directory specified by the NCRACKDIR environmental
          variable <envar>NCRACKDIR</envar> (if it is defined).
          Next comes <filename>~/.ncrack</filename> directory for real and
          effective UIDs (POSIX systems only) or location of the Ncrack
          executable (Win32 only), and then a compiled-in location such as
          <filename>/usr/local/share/ncrack</filename> or
          <filename>/usr/share/ncrack</filename>. As a last resort, Ncrack will
          look in the current directory.
        </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-V</option>; <option>--version</option>
          (Print version number)
          <indexterm><primary><option>-V</option></primary></indexterm>
          <indexterm><primary><option>--version</option></primary></indexterm>
        </term>
        <listitem>
          <para>Prints the Ncrack version number and exits.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-h</option>; <option>--help</option>
          (Print help summary page)
          <indexterm><primary><option>-h</option></primary></indexterm>
          <indexterm><primary><option>--help</option></primary></indexterm>
        </term>
        <listitem>
          <para>Prints a short help screen with the most common
          command flags. Running Ncrack without any arguments does the
          same thing.</para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>



  <refsect1 id='man-runtime-interaction'>
     <title>Runtime Interaction<indexterm><primary>runtime interaction
     </primary></indexterm></title>

    <para>During the execution of Ncrack, all key presses are
    captured. This allows you to interact with the program
    without aborting and restarting it. Certain special
    keys will change options, while any other keys will print out a
    status message telling you about the scan. The convention is
    that 
    <emphasis>lowercase letters increase</emphasis> the
    amount of printing, and 
    <emphasis>uppercase letters decrease</emphasis> the
    printing.  You may also press &lsquo;<emphasis>?</emphasis>&rsquo;
    for help.</para>
    <variablelist>
      <varlistentry>
        <term>
          <option>v</option> / <option>V</option>
        </term>
        <listitem>
          <para>Increase / decrease the verbosity level</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>d</option> / <option>D</option>
        </term>
        <listitem>
          <para>Increase / decrease the debugging Level</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>?</option>
        </term>
        <listitem>
          <para>Print a runtime interaction help screen</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          Anything else
        </term>
        <listitem>
          <para>Print out a status message like this:</para>
          <para>Stats: 0:00:20 elapsed; 0 services completed (1 total)</para>
          <para>
       Rate: 6.26; Found: 1; About 13.27% done; ETC: 21:06 (0:02:17 remaining)
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


    
  <refsect1 id='man-bugs'>
   <title>Bugs</title>
   <indexterm><primary>bugs, reporting</primary></indexterm>

   <para>
    Like its authors, Ncrack isn't perfect. But you can help make
    it better by sending bug reports or even writing patches. If Ncrack
    doesn't behave the way you expect, first upgrade to the latest
    version available from <ulink url="http://ncrack.org"/>. If the
    problem persists, do some research to determine whether it has already
    been discovered and addressed. Try searching for the error message on our
    search page at <ulink url="http://insecure.org/search.html"/> or at
    Google. Also try browsing the <citetitle>nmap-dev</citetitle> archives
    at <ulink url="http://seclists.org/"/> .
    <indexterm><primary> <citetitle>nmap-dev</citetitle> mailing list
    </primary></indexterm>
    Read this full manual page as well. If nothing comes of this, mail a bug
    report to <email>nmap-dev@insecure.org</email> . Please include
    everything you have learned about the problem, as well as what version of
    Ncrack you are running and what operating system version it is running on.
    Problem reports and Ncrack usage questions sent to
    <email>nmap-dev@insecure.org</email> are far more likely to be answered
    than those sent to Fyodor directly. If you subscribe to the nmap-dev
    list before posting, your message will bypass moderation and get through
    more quickly. Subscribe at 
    <ulink url="http://cgi.insecure.org/mailman/listinfo/nmap-dev"/> .
   </para>

   <para>
    Code patches to fix bugs are even better than bug reports.
    Basic instructions for creating patch files with your changes are
    available at <ulink url="http://nmap.org/data/HACKING" /> . Patches may
    be sent to <citetitle>nmap-dev</citetitle> (recommended) or to Fyodor
    directly.
   </para>

  </refsect1>


  <refsect1 id="man-author">
    <title>Authors</title>
    <para>ithilgore <email>ithilgore.ryu.l@gmail.com</email>
      (<ulink url="http://sock-raw.org" />)</para>
    <para>Fyodor <email>fyodor@insecure.org</email>
      (<ulink url="http://insecure.org" />)</para>
  </refsect1>


</refentry>

<indexterm class="endofrange" startref="man-ncrack-indexterm"
  significance="normal"/>
